TODO

Decide on what the app should look like 

- User will enter the Number of Cols and Rows of Input - Maybe for future versions 
- User will give some data - [For Now restrict it to - 2 variable input, 1 independent and 1 dependent]
- User can add the number of rows for input
- Two seperate sections for train and test output
- Also add input for custom input for getting the output from the model



TODO
- First create a model, in jupyter notebook and discuss a deploying strategy - TODO
Done

- Model Created
- deploying strategy, If components with various tech stack - Docker(Heroku)
- Else  Frontent Facing application, Deployed on Github pages




- Most probably go with the containerization approach
- 

-----------------------------------------------------------------------------------------------------------
Render page function
- Render only what was added (Not the whole DOM)


- Do rendering of the other added elements (total rows - 2) => Render
- Single Table rendering function
- Have 2 base elements 
- Build on those 2 elements
- 

-------------------------------------------------------------------------------------------------------------
Use the type="module" attribute in your HTML file: In your HTML file, add the type="module" attribute to the 
script tag that references your JavaScript files. This tells the browser that the script should be treated as a module a
nd allows you to use ECMAScript modules (ESM) features like import and export statements.

TODO

- Event methods such as "onClick" don't get triggered if defined inside a script with a module tag.

It only works when they are defined inside simple script tags

[haven't been able to find out the reason for this]
------------------------------
4/19/23

Maybe not Implement the Linear Regression logic in Javascript from scratch and 
reuse the python expose with a rest API (Deploy as a docker container, to heroku)
(But will take more time)

- As a first target deploy using only Github pages 


and order RaspBerry PI

-----------------

You can't make imports and exports work on the frontend level
for that you require a server environment - 
Link - https://www.digitalocean.com/community/tutorials/understanding-modules-and-import-and-export-statements-in-javascript

I might be a bit in accurate on this one maybe you can make it work



<!-- index.html -->

<script type="module">
  // Define a JavaScript module
  const myFunction = () => {
    console.log("Hello from myFunction!");
  };

  // Export the function to be used in other modules
  export { myFunction };
</script>

// main.js

// Import the function from the module
import { myFunction } from './index.js';

// Call the imported function
myFunction()


<!-- index.html -->

<script type="module">
  // Import the function from the module
  import { myFunction } from './main.js';

  // Attach an event listener to a button element
  document.querySelector('#myButton').addEventListener('click', () => {
    // Call the imported function when the button is clicked
    myFunction();
  });
</script>

<button id="myButton">Click me</button>


USING QUERY SELECTOR - 


-------------------------------------------------------
